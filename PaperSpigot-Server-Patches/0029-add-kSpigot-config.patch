From 2702acfbc26b608bedc29750d47a4aaff632f23f Mon Sep 17 00:00:00 2001
From: IFleetwood <zuxirewind@gmail.com>
Date: Fri, 10 Jul 2020 23:54:26 +0200
Subject: [PATCH] add-kSpigot-config


diff --git a/src/main/java/cc/kasumi/kspigot/KSpigotConfig.java b/src/main/java/cc/kasumi/kspigot/KSpigotConfig.java
new file mode 100644
index 00000000..6567f454
--- /dev/null
+++ b/src/main/java/cc/kasumi/kspigot/KSpigotConfig.java
@@ -0,0 +1,151 @@
+package cc.kasumi.kspigot;
+
+import com.google.common.base.Throwables;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+
+public class KSpigotConfig {
+
+    private static File CONFIG_FILE;
+    private static final String HEADER = "This is the main configuration file for kSpigot.\n"
+            + "As you can see, there's tons to configure. Some options may impact gameplay, so use\n"
+            + "with caution, and make sure you know what each option does before configuring.";
+    /*========================================================================*/
+    public static YamlConfiguration config;
+    static int version;
+    static Map<String, Command> commands;
+    /*========================================================================*/
+
+    public static void init(File configFile)
+    {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try
+        {
+            config.load ( CONFIG_FILE );
+        } catch ( IOException ex )
+        {
+        } catch ( InvalidConfigurationException ex )
+        {
+            Bukkit.getLogger().log( Level.SEVERE, "Could not load kasumi.yml, please correct your syntax errors", ex );
+            throw Throwables.propagate( ex );
+        }
+        config.options().header( HEADER );
+        config.options().copyDefaults( true );
+
+        commands = new HashMap<String, Command>();
+
+        version = getInt( "config-version", 9 );
+        set( "config-version", 9 );
+        readConfig( KSpigotConfig.class, null );
+    }
+
+    public static void registerCommands()
+    {
+        for ( Map.Entry<String, Command> entry : commands.entrySet() )
+        {
+            MinecraftServer.getServer().server.getCommandMap().register( entry.getKey(), "kSpigot", entry.getValue() );
+        }
+    }
+
+    static void readConfig(Class<?> clazz, Object instance)
+    {
+        for ( Method method : clazz.getDeclaredMethods() )
+        {
+            if ( Modifier.isPrivate( method.getModifiers() ) )
+            {
+                if ( method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE )
+                {
+                    try
+                    {
+                        method.setAccessible( true );
+                        method.invoke( instance );
+                    } catch ( InvocationTargetException ex )
+                    {
+                        throw Throwables.propagate( ex.getCause() );
+                    } catch ( Exception ex )
+                    {
+                        Bukkit.getLogger().log( Level.SEVERE, "Error invoking " + method, ex );
+                    }
+                }
+            }
+        }
+
+        try
+        {
+            config.save( CONFIG_FILE );
+        } catch ( IOException ex )
+        {
+            Bukkit.getLogger().log( Level.SEVERE, "Could not save " + CONFIG_FILE, ex );
+        }
+    }
+
+    private static void set(String path, Object val)
+    {
+        config.set( path, val );
+    }
+
+    private static boolean getBoolean(String path, boolean def)
+    {
+        config.addDefault( path, def );
+        return config.getBoolean( path, config.getBoolean( path ) );
+    }
+
+    private static double getDouble(String path, double def)
+    {
+        config.addDefault( path, def );
+        return config.getDouble( path, config.getDouble( path ) );
+    }
+
+    private static float getFloat(String path, float def)
+    {
+        // TODO: Figure out why getFloat() always returns the default value.
+        return (float) getDouble( path, (double) def );
+    }
+
+    private static int getInt(String path, int def)
+    {
+        config.addDefault( path, def );
+        return config.getInt( path, config.getInt( path ) );
+    }
+
+    private static <T> List getList(String path, T def)
+    {
+        config.addDefault( path, def );
+        return (List<T>) config.getList( path, config.getList( path ) );
+    }
+
+    private static String getString(String path, String def)
+    {
+        config.addDefault( path, def );
+        return config.getString( path, config.getString( path ) );
+    }
+
+    public static double knockbackFriction = 2.0D;
+    public static double knockbackHorizontal = 0.35D;
+    public static double knockbackVertical = 0.35D;
+    public static double knockbackVerticalLimit = 0.4D;
+    public static double knockbackExtraHorizontal = 0.425D;
+    public static double knockbackExtraVertical = 0.085D;
+    private static void knockback() {
+        knockbackFriction = getDouble("knockback.friction", knockbackFriction);
+        knockbackHorizontal = getDouble("knockback.horizontal", knockbackHorizontal);
+        knockbackVertical = getDouble("knockback.vertical", knockbackVertical);
+        knockbackVerticalLimit = getDouble("knockback.vertical-limit", knockbackVerticalLimit);
+        knockbackExtraHorizontal = getDouble("knockback.extra-horizontal", knockbackExtraHorizontal);
+        knockbackExtraVertical = getDouble("knockback.extra-vertical", knockbackExtraVertical);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 088beb22..a131ec8f 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -1,10 +1,10 @@
 package net.minecraft.server;
 
+import cc.kasumi.kspigot.KSpigotConfig;
 import com.google.common.collect.Lists;
-import java.io.BufferedReader;
+
 import java.io.File;
 import java.io.IOException;
-import java.io.InputStreamReader;
 import java.net.InetAddress;
 import java.net.Proxy;
 import java.util.Collections;
@@ -181,6 +181,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             org.github.paperspigot.PaperSpigotConfig.init((File) options.valueOf("paper-settings"));
             org.github.paperspigot.PaperSpigotConfig.registerCommands();
             // PaperSpigot end
+            cc.kasumi.kspigot.KSpigotConfig.init((File) options.valueOf("kasumi-settings"));
 
             DedicatedServer.LOGGER.info("Generating keypair");
             this.a(MinecraftEncryption.b());
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index a3f8b959..40521f9f 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import cc.kasumi.kspigot.KSpigotConfig;
 import com.google.common.base.Charsets;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
@@ -1005,9 +1006,9 @@ public abstract class EntityHuman extends EntityLiving {
                     if (flag2) {
                         if (i > 0) {
                             entity.g(
-                                    (double) (-MathHelper.sin(this.yaw * 3.1415927F / 180.0F) * (float) i * SpigotConfig.knockbackExtraHorizontal),
-                                    SpigotConfig.knockbackExtraVertical,
-                                    (double) (MathHelper.cos(this.yaw * 3.1415927F / 180.0F) * (float) i * SpigotConfig.knockbackExtraHorizontal));
+                                    (double) (-MathHelper.sin(this.yaw * 3.1415927F / 180.0F) * (float) i * KSpigotConfig.knockbackExtraHorizontal),
+                                    KSpigotConfig.knockbackExtraVertical,
+                                    (double) (MathHelper.cos(this.yaw * 3.1415927F / 180.0F) * (float) i * KSpigotConfig.knockbackExtraHorizontal));
                             this.motX *= 0.6D;
                             this.motZ *= 0.6D;
                             this.setSprinting(false);
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 5a5d7e5a..32669fe5 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import cc.kasumi.kspigot.KSpigotConfig;
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
 import com.google.common.collect.Maps;
@@ -899,16 +900,16 @@ public abstract class EntityLiving extends Entity {
         if (this.random.nextDouble() >= this.getAttributeInstance(GenericAttributes.c).getValue()) {
             this.ai = true;
             double magnitude = MathHelper.sqrt(d0 * d0 + d1 * d1);
-            this.motX /= SpigotConfig.knockbackFriction;
-            this.motY /= SpigotConfig.knockbackFriction;
-            this.motZ /= SpigotConfig.knockbackFriction;
+            this.motX /= KSpigotConfig.knockbackFriction;
+            this.motY /= KSpigotConfig.knockbackFriction;
+            this.motZ /= KSpigotConfig.knockbackFriction;
 
-            this.motX -= d0 / magnitude * SpigotConfig.knockbackHorizontal;
-            this.motY += SpigotConfig.knockbackVertical;
-            this.motZ -= d1 / magnitude * SpigotConfig.knockbackHorizontal;
+            this.motX -= d0 / magnitude * KSpigotConfig.knockbackHorizontal;
+            this.motY += KSpigotConfig.knockbackVertical;
+            this.motZ -= d1 / magnitude * KSpigotConfig.knockbackHorizontal;
 
-            if (this.motY > SpigotConfig.knockbackVerticalLimit) {
-                this.motY = SpigotConfig.knockbackVerticalLimit;
+            if (this.motY > KSpigotConfig.knockbackVerticalLimit) {
+                this.motY = KSpigotConfig.knockbackVerticalLimit;
             }
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
index e9a3c501..a1789966 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
@@ -3,6 +3,7 @@ package org.bukkit.craftbukkit.inventory;
 import java.util.HashMap;
 import java.util.List;
 import java.util.ListIterator;
+import java.util.UUID;
 
 import net.minecraft.server.IHopper;
 import net.minecraft.server.IInventory;
@@ -26,9 +27,11 @@ import org.bukkit.Material;
 
 public class CraftInventory implements Inventory {
     protected final IInventory inventory;
+    private final UUID uuid;
 
     public CraftInventory(IInventory inventory) {
         this.inventory = inventory;
+        this.uuid = UUID.randomUUID();
     }
 
     public IInventory getInventory() {
@@ -417,6 +420,10 @@ public class CraftInventory implements Inventory {
         return new InventoryIterator(this, index);
     }
 
+    public UUID getUUID() {
+        return this.uuid;
+    }
+
     public List<HumanEntity> getViewers() {
         return this.inventory.getViewers();
     }
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index d0e52ac8..b9d185d9 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -212,21 +212,6 @@ public class SpigotConfig
         outdatedServerMessage = transform( getString( "messages.outdated-server", outdatedServerMessage ) );
     }
 
-    public static double knockbackFriction = 2.0D;
-    public static double knockbackHorizontal = 0.35D;
-    public static double knockbackVertical = 0.35D;
-    public static double knockbackVerticalLimit = 0.4D;
-    public static double knockbackExtraHorizontal = 0.425D;
-    public static double knockbackExtraVertical = 0.085D;
-    private static void knockback() {
-        knockbackFriction = getDouble("knockback.friction", knockbackFriction);
-        knockbackHorizontal = getDouble("knockback.horizontal", knockbackHorizontal);
-        knockbackVertical = getDouble("knockback.vertical", knockbackVertical);
-        knockbackVerticalLimit = getDouble("knockback.vertical-limit", knockbackVerticalLimit);
-        knockbackExtraHorizontal = getDouble("knockback.extra-horizontal", knockbackExtraHorizontal);
-        knockbackExtraVertical = getDouble("knockback.extra-vertical", knockbackExtraVertical);
-    }
-
     public static int timeoutTime = 60;
     public static boolean restartOnCrash = true;
     public static String restartScript = "./start.sh";
-- 
2.27.0.windows.1

